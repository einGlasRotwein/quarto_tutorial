[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto Tutorial",
    "section": "",
    "text": "Preface\nDieses Dokument ist eine kleine Demo von Quarto, einem Tool, um reproduzierbare Manuskripte zu erstellen. Im Workshop habe ich euch live gezeigt, was Quarto kann - hier ist alles noch mal ausführlicher “zum Nachkochen” festgehalten."
  },
  {
    "objectID": "index.html#grundlegendes",
    "href": "index.html#grundlegendes",
    "title": "Quarto Tutorial",
    "section": "Grundlegendes",
    "text": "Grundlegendes\nDie Logik von Quarto (und reproduzierbaren Manuskripten) ist: Daten, Analyse und Manuskript sind verknüpft. In einem “herkömmlichen” Manuskript rechnen wir Analysen mit unseren Daten, und müssen die Ergebnisse dann mühevoll in unser Manuskript kopieren. Das bedeutet: Mittelwerte, Standardabweichungen, Freiheitsgrade, t-Werte, p-Werte, Konfidentintervalle etc. müssen eingefügt werden. Das ist nicht nur fehleranfällig, sondern auch sehr aufwändig. Selbst, wenn ich den Analysecode erneut laufen lasse (z.B. wenn ich einen Fehler gemacht habe oder die Datenquelle sich ändert), bleiben die Werte im Manuskript, wie sie sind. Bei einem reproduzierbaren Manuskript sind meine Analysen direkt ins Manuskript eingebettet, das heißt: Wenn ich meine Analysen ändere, ändern sich auch die entsprechenden Werte im Manuskript (dafür muss ich das Manuskript nur neu “rendern”).\nEin reproduzierbares Manuskript besteht immer aus (mindestens) zwei Dateien: Erstens eine Datei, die den Code für das Manuskript enthält (z.B. ein Quarto-Dokument mit der Dateiendung .qmd). Und zweitens eine Output-Datei, die das fertig “gerenderte” Dokument enthält (das kann so wie hier eine html-Datei sein, oder aber eine PDF, ein Word-Dokument …)."
  },
  {
    "objectID": "01_quarto_setup.html#footnotes",
    "href": "01_quarto_setup.html#footnotes",
    "title": "1  Setup",
    "section": "",
    "text": "Der Visual-Editor bietet euch viele komfortable Vorteile. Ihr könnt z.B. per Klick Bilder oder Referenzen einfügen, Text formatieren etc. - ganz ähnlich, wie das in Text-Editoren wie Word läuft. Ich persönlich verwende lieber den “hässlicheren” Source-Editor, der diese Optionen nicht hat (der zeigt euch nur den “rohen” Code an). Der Grund ist, dass der Wechsel zwischen Source und Visual Editor manchmal Dinge im Code verändert. Zum Beispiel werden zwei Sätze, die ich im Code in zwei Zeilen gepackt hatte, durch den Visual Editor manchmal in eine einzige Zeile gepackt. Das hat für das Output-Dokument (in diesem Fall) überhaupt keine Konsequenzen, aber ich mag dieses Verhalten nicht. (Das übrigens keine böse Absicht ist - es ist nur ein sehr schwierig zu lösendes Programmierproblem.)↩︎\nJe nachdem, wie ihr arbeitet (wenn ihr z.B. wie ich manchmal auf einem Server eures Instituts unterwegs seid), kann es passieren, dass im Background-Job davon die Rede ist, dass der Server (bzw. der localhost) nicht gefunden wurde, und es erscheint nichts im Viewer. Das macht aber gar nichts. Quarto würde euch gerne die Datei über einen sogenannten localhost anzeigen, aber selbst wenn das nicht klappt, wurde trotzdem ziemlich sicher eure Datei so generiert, wie sie sollte. Diese ist im selben Ordner wie euer Quarto-Dokument erschienen, und ihr könnt sie einfach per Doppelklick öffnen, wenn sie nicht automatisch angezeigt wird.↩︎"
  },
  {
    "objectID": "02_basics.html",
    "href": "02_basics.html",
    "title": "2  Basics",
    "section": "",
    "text": "2.0.1 Source vs. Visual Editor\nKurz zu den verschiedenen Editoren in Quarto. Oben in der Menüleiste könnt ihr zwischen “Source” und “Visual” wechseln. Ihr könnt das ja mal ausprobieren und schauen, was der Effekt ist. Der Source Editor wirkt erst mal “roher” und “hässlicher” - außerdem fällt auf, dass ihr im Visual Editor oben zusätzliche Optionen habt, z.B. zum Einfügen von Bildern etc. Grundsätzlich empfinden viele den Visual Editor bestimmt als komfortabler (ist er ja objektiv auch), aber manchmal gibt es spezifische, kniffligere Formatierungs-Dinge, die sich besser (oder ggf. ausschließlich) im Source Editor umsetzen lassen. An sich ist es auch kein Problem, zwischen den Editoren nach Bedarf hin und her zu wechseln. Es kann jedoch passieren, dass der Visual Editor euren Source Code minimal ändert. Meistens hat das keine sichtbaren Effekte in eurer Output-Datei (der Visual Editor findet einfach einen anderen Weg, dieselbe Sache in Form von Code umzusetzen) - in seltenen Fällen kann jedoch auch mal was zerschossen werden (Thema “spezifische, kniffligere Formatierungs-Dinge”).\nNutzt ruhig, was auch immer euch eher liegt oder wechselt hin und her, wie ihr mögt (um z.B. bequem eine Referenz über den Visual Editor einzufügen). Das ist nur ein Hinweis für den seltenen Fall, dass doch mal was kaputt gehen sollte.\n\n\n2.0.2 Text-Formatierung\nViele Formatierungs-Optionen sind auch über den Visual-Editor verfügbar, indem ihr den gewünschten Text markiert und oben im Menü unter “Format” die Formatierung eurer Wahl auswählt. Ich zeige euch hier aber, wie der Code dahinter funktioniert. Wenn ihr den Source-Editor verwendet, braucht ihr den “rohen Code”. Wenn ihr den Visual-Editor verwendet, könnt ihr trotzdem auch den Code eingeben. In diesem Fall würde **test** dann automatisch umgewandelt werden zum fettgedruckten test.\n\n2.0.2.1 Überschriften\nText-Formatierung funktioniert nach Markdown-Prinzipien. So wird eine Überschrift (Level 1, also das höchste Level) mit # gekennzeichnet. Eine Überschrift auf Level 2 wird mit ## erstellt, eine Überschrift auf Level 3 wird mit ### erstellt - und so weiter. Ihr könnt z.B. folgenden Code in eurem Quarto-Dokument ausprobieren:\n# Große Überschrift\n\nHier steht Text.\n\n## Ein Level tiefer\n### Noch ein Level tiefer\n\nHier ist mehr Text.\n\n\n2.0.2.2 Auszeichnungsarten\n\nKursiven Text könnt ihr mit einfachen Sternchen erstellen: *Das ist kursiver Text*.\nFettgedruckten Text erzeugt ihr mit doppelten Sternchen: **Das ist fett gedruckter Text**.\nHochgestellter Textx geht so: Das x ist hochgestellt^x.\nTiefgestellter Texty geht so: Das y ist tiefgestellt~y~.\nCode (so wie ich es hier in den Beispielen nutze) könnt ihr mit Backticks formatieren: `Code` wird zu Code.\n\n\n\n2.0.2.3 Listen\n\nUnten findet ihr\n\nden Code\nder diese Liste\n\nerzeugt\n\n\n\n* Unten findet ihr\n    + den Code\n    + der diese Liste\n        - erzeugt\n\n\n2.0.2.4 Tabellen\nEinfache Tabellen könnt ihr folgendermaßen erstellen:\n| Hier |  eine  | Tabelle |\n|------|--------|---------|\n|  12  | Spalte |   2.5   |\n| 123  |   mit  |  12.2   |\n|   1  |  Text  | 823.0   |\n\n\n\nHier\neine\nTabelle\n\n\n\n\n12\nSpalte\n2.5\n\n\n123\nmit\n12.2\n\n\n1\nText\n823.0\n\n\n\nÜber den visual Mode könnt ihr Tabellen einfach einfügen, ohne den Code für die Tabelle händisch erstellen zu müssen. Wenn die Tabelle aus euren Daten besteht, ist das aber immer noch unpraktisch, bzw. bedeutet viel Copy-Paste-Arbeit. Man kann Tabellen daher auch direkt aus den Daten erstellen - dazu aber später mehr.\n\n\n2.0.2.5 Gleichungen\nGleichungen stehen innerhalb von $-Zeichen (\\(\\LaTeX\\)-Nutzer werden das kennen). Ihr könntet also so etwas schreiben wie $\\alpha = .05$ (\\(\\alpha = .05\\)), oder \\(\\beta_{123} = 12^3\\). Auch Mittelwert und Standardabweichung kann man so angeben: $M = 2.45, SD = 0.32$ wird zu \\(M = 2.45, SD = 0.32\\). Auch hier gilt: Das ist immer noch zu viel unbequeme manuelle Arbeit. Wir schauen uns später R-Pakete an, die uns das Leben leichter machen.\n\n\n\n2.0.3 Andere Sprachen\nInnerhalb einer html-Datei könnt ihr natürlich auch immer html-Code verwenden, so könntet ihr beispielsweise auch Text via html fett schreiben: &lt;b&gt;fettgedruckter Text&lt;/b&gt; wird zu fettgedruckter Text. Auch roher \\(\\LaTeX\\)-Code ist möglich (braucht ihr ggf. in Spezialfällen, wenn ihr eine PDF erstellen wollt)."
  }
]